{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/address/address.component.html","webpack:///./src/app/admin/address/address.component.ts","webpack:///./src/app/admin/login/login.component.html","webpack:///./src/app/admin/login/login.component.ts","webpack:///./src/app/admin/overview/overview.component.html","webpack:///./src/app/admin/overview/overview.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/book-details/book-details.component.html","webpack:///./src/app/book-details/book-details.component.ts","webpack:///./src/app/book-form/book-form-error-messages.ts","webpack:///./src/app/book-form/book-form.component.html","webpack:///./src/app/book-form/book-form.component.ts","webpack:///./src/app/book-list-item/book-list-item.component.html","webpack:///./src/app/book-list-item/book-list-item.component.ts","webpack:///./src/app/book-list/book-list.component.html","webpack:///./src/app/book-list/book-list.component.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/order-list-item/order-list-item.component.html","webpack:///./src/app/order-list-item/order-list-item.component.ts","webpack:///./src/app/order-list/order-list.component.html","webpack:///./src/app/order-list/order-list.component.ts","webpack:///./src/app/order-overview-item/order-overview-item.component.html","webpack:///./src/app/order-overview-item/order-overview-item.component.ts","webpack:///./src/app/order-overview/order-overview.component.html","webpack:///./src/app/order-overview/order-overview.component.ts","webpack:///./src/app/orderlog-form/orderlog-form.component.html","webpack:///./src/app/orderlog-form/orderlog-form.component.ts","webpack:///./src/app/orderlog-item/orderlog-item.component.html","webpack:///./src/app/orderlog-item/orderlog-item.component.ts","webpack:///./src/app/orderlog-list/orderlog-list.component.html","webpack:///./src/app/orderlog-list/orderlog-list.component.ts","webpack:///./src/app/shared/address-factory.ts","webpack:///./src/app/shared/address.ts","webpack:///./src/app/shared/authentication-service.ts","webpack:///./src/app/shared/author.ts","webpack:///./src/app/shared/book-factory.ts","webpack:///./src/app/shared/book-store.service.ts","webpack:///./src/app/shared/book.ts","webpack:///./src/app/shared/image.ts","webpack:///./src/app/shared/order-factory.service.ts","webpack:///./src/app/shared/order.ts","webpack:///./src/app/shared/orderlog-factory.service.ts","webpack:///./src/app/shared/orderlog.ts","webpack:///./src/app/shared/token-interceptor.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--<div class=\\\"content\\\" >\\n  <div class=\\\"yellow bordered\\\" *ngIf=\\\"address.isMain != true\\\">\\n    <div class=\\\"header\\\"></div>\\n    <div class=\\\"description\\\">Straße: {{ address.street }}</div>\\n    <div class=\\\"description\\\">Stadt: {{ address.city }}</div>\\n    <div class=\\\"description\\\">Postleitzahl: {{ address.postcode }} </div>\\n\\n  <!--</div>\\n</div>-->\\n<div class=\\\"ui list\\\" *ngIf=\\\"address\\\">\\n  <div class=\\\"item\\\" [ngClass]=\\\"{\\n  active: isItActive()\\n      }\\\">\\n  <i class=\\\"map marker icon\\\" *ngIf=\\\"!isItMain()\\\"></i>\\n    <i class=\\\"yellow star icon\\\" *ngIf=\\\"isItMain()\\\"></i>\\n  <div class=\\\"content\\\">\\n    <div class=\\\"header\\\">Land: {{address.country}}</div>\\n    <button class=\\\"ui right floated tiny red button labeled icon\\\" (click)=\\\"removeAddress(address.id)\\\" ><i class=\\\"delete icon\\\"></i>\\n      Löschen</button>\\n    <div class=\\\"description\\\">Straße: {{ address.street }}</div>\\n    <div class=\\\"description\\\">Postleitzahl: {{ address.postcode }} </div>\\n    <div class=\\\"description\\\">Stadt: {{ address.city }}</div>\\n  </div>\\n  <div class=\\\"extra\\\">\\n  </div>\\n</div>\\n</div>\\n\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Address} from \"../../shared/address\";\nimport {BookStoreService} from \"../../shared/book-store.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../../shared/authentication-service\";\nimport {FormBuilder} from \"@angular/forms\";\n\n@Component({\n  selector: 'a.bs-address',\n  templateUrl: './address.component.html',\n  styles: []\n})\nexport class AddressComponent implements OnInit {\n  @Input() address : Address;\n        main : boolean;\n\n  constructor(private bs: BookStoreService,\n              private route : ActivatedRoute,\n              private router : Router,\n              private authService : AuthService,\n              private fb: FormBuilder) { }\n\n  ngOnInit() {\n      const user = parseInt(localStorage.getItem('userId'));\n\n  }\n\n    removeAddress(id:number){\n      if(confirm(\"Adresse wirklich löschen?\")){\n          console.log(id);\n          this.bs.removeAddress(this.address.id).subscribe(res => {\n              this.router.navigate(['../../'], {relativeTo: this.route})\n              //window.location.reload();\n          });\n\n      }\n    }\n    isItMain(){\n        return this.address.isMain\n    }\n    isItActive(){\n        return this.address.id == this.route.snapshot.params.id\n\n    }\n\n}\n","module.exports = \"<div class=\\\"ui grid\\\" >\\n  <div class=\\\"column row\\\" *ngIf=\\\"!isLoggedIn()\\\">\\n  <div class=\\\"sixteen wide column\\\">\\n    <div class=\\\"ui horizontal divider\\\">\\n      <h2>Login</h2>\\n    </div>\\n  </div>\\n</div>\\n  <div class=\\\"column row\\\" *ngIf=\\\"isLoggedIn()\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h2>Logout</h2>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n    <div class=\\\"six wide column\\\" *ngIf=\\\"!isLoggedIn()\\\">\\n      <form  class=\\\"ui large form\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\">\\n        <div class=\\\"field\\\">\\n          <label>E-Mail</label>\\n          <input type=\\\"email\\\" id=\\\"username\\\" formControlName=\\\"username\\\">\\n          <div *ngIf=\\\"loginForm.get('username').invalid &&\\n         (loginForm.get('username').dirty || loginForm.get('username').touched) &&\\n         loginForm.get('username').hasError('required')\\\" class=\\\"ui negative message\\\">\\n            Benutzername ist verpflichtend </div>\\n          <div *ngIf=\\\"loginForm.get('username').invalid &&\\n         (loginForm.get('username').dirty || loginForm.get('username').touched) &&\\n         loginForm.get('username').hasError('email')\\\" class=\\\"ui negative message\\\">\\n            E-Mail Format überprüfen </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Passwort</label>\\n          <input type=\\\"password\\\" formControlName=\\\"password\\\">\\n          <div *ngIf=\\\"loginForm.get('password').invalid &&\\n         (loginForm.get('password').dirty || loginForm.get('password').touched)\\\" class=\\\"ui negative message\\\">\\n            Passwort ist verpflichtend </div>\\n        </div>\\n\\n        <button type=\\\"submit\\\" class=\\\"ui button\\\" [disabled]=\\\"loginForm.invalid\\\">Login</button>\\n      </form>\\n    </div>\\n    <div class=\\\"eight wide column\\\" *ngIf=\\\"isLoggedIn()\\\">\\n      <button type=\\\"button\\\" class=\\\"ui button\\\" (click)=\\\"logout()\\\">Logout</button>\\n    </div>\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport { Router} from \"@angular/router\";\nimport { AuthService } from \"../../shared/authentication-service\";\n\ninterface Response{\n    response : string;\n    result: {\n        token: string;\n    }\n}\n\n@Component({\n    selector: 'bs-login',\n    templateUrl: './login.component.html',\n    styles: []\n})\nexport class LoginComponent implements OnInit {\n\n    loginForm : FormGroup;\n\n    constructor(private fb: FormBuilder, private router: Router,\n                private authService: AuthService) { }\n\n    ngOnInit() {\n        this.loginForm = this.fb.group({\n            username: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required]\n        });\n    }\n\n    login(){\n        //werte von loginform als array\n        const val = this.loginForm.value;\n        if(val.username && val.password){\n            this.authService.login(val.username, val.password).subscribe(res => {\n                const resObj = res as Response;\n\n                //steht bei postman als antwort wenn man login methode macht\n\n                if(resObj.response === 'success'){\n                    this.authService.setLocalStorage(resObj.result.token);\n                    this.router.navigateByUrl('/');\n                }\n            });\n        }\n    }\n\n    isLoggedIn(){\n        return this.authService.isLoggedIn();\n    }\n\n    /*\n    isBackEndUser(){\n        return this.authService.isBackendUser();\n    }\n    */\n\n    logout(){\n        this.authService.logout();\n    }\n\n}\n","module.exports = \"<div *ngIf=\\\"!addresses\\\" class=\\\"ui active dimmer\\\">\\n  <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n</div>\\n<div class=\\\"ui grid\\\" *ngIf=\\\"addresses\\\" >\\n  <div class=\\\"column row\\\" *ngIf=\\\"!authService.isBackendUser()\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h3>Verwalten Sie ihre Daten</h3>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\" >\\n    <div class=\\\"three wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n    <div class=\\\"five wide aligned column\\\" *ngIf=\\\"!authService.isBackendUser()\\\">\\n      <!-- Addressauflistung -->\\n      <h3 class=\\\"ui dividing header\\\">Bestehende Adressen</h3>\\n      <div class=\\\"ui middle aligned selection divided list\\\" *ngIf=\\\"isOverview(param.id)\\\">\\n        <a *ngFor=\\\"let address of addresses\\\" class=\\\"item bs-address\\\"\\n           [address]=\\\"address\\\" [routerLink]=\\\"['update/', address.id]\\\">\\n        </a>\\n      </div>\\n      <div class=\\\"ui middle aligned selection divided list\\\" *ngIf=\\\"!isOverview(param.id)\\\">\\n        <a *ngFor=\\\"let address of addresses\\\" class=\\\"item bs-address\\\"\\n           [address]=\\\"address\\\" [routerLink]=\\\"['../', address.id]\\\" (click)=\\\"window.location.reload()\\\">\\n        </a>\\n      </div>\\n      </div>\\n    <!-- Adressenformular -->\\n    <div class=\\\"five wide column\\\">\\n      <form class=\\\"ui form\\\" [formGroup]=\\\"addressForm\\\" (ngSubmit)=\\\"submitForm()\\\" *ngIf=\\\"!authService.isBackendUser()\\\">\\n        <h3 class=\\\"ui dividing header\\\">Neue Adresse anlegen</h3>\\n        <div class=\\\"two fields\\\">\\n            <div class=\\\"ten wide field\\\">\\n              <label>Addresse</label>\\n              <input type=\\\"text\\\" formControlName=\\\"street\\\" id=\\\"street\\\" placeholder=\\\"Straße\\\">\\n            </div>\\n            <div class=\\\"six wide field\\\">\\n              <label>Stadt</label>\\n              <input type=\\\"text\\\" formControlName=\\\"city\\\" id=\\\"city\\\" placeholder=\\\"Stadt\\\">\\n            </div>\\n        </div>\\n        <div class=\\\"two fields\\\">\\n          <div class=\\\"field\\\">\\n            <label>Postleitzahl</label>\\n            <input type=\\\"number\\\" formControlName=\\\"postcode\\\" id=\\\"postcode\\\" placeholder=\\\"Stadt\\\">\\n          </div>\\n          <div class=\\\"field\\\">\\n          <label>Land</label>\\n            <select class=\\\"ui dropdown\\\" id=\\\"country\\\" formControlName=\\\"country\\\">\\n              <option *ngFor=\\\"let country of countries\\\" [value]=\\\"country.id\\\">{{country.name}}</option>\\n            </select>\\n          </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <div class=\\\"six wide field\\\">\\n              <label>Hauptadresse?</label>\\n              <input type=\\\"number\\\" formControlName=\\\"isMain\\\" id=\\\"isMain\\\" placeholder=\\\"(1 JA | 0 NEIN)\\\">\\n          </div>\\n          <div class=\\\"six wide column\\\">\\n          </div>\\n          <div class=\\\"two fields\\\">\\n            <div class=\\\"sixteen wide field\\\">\\n              <!-- Platzhalter -->\\n            </div>\\n            <div class=\\\"four wide right aligned field\\\">\\n              <button type=\\\"submit\\\" class=\\\"ui button\\\" [disabled]=\\\"addressForm.invalid\\\">Speichern</button>\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n      <!-- Ende des Adressenformulars -->\\n    </div>\\n    <div class=\\\"three wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\" *ngIf=\\\"authService.isBackendUser()\\\">\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n    <div class=\\\"six wide column\\\">\\n    <h3 class=\\\"ui dividing header\\\" *ngIf=\\\"authService.isBackendUser()\\\">Verwaltung der Bücher</h3>\\n    <div class=\\\"ui grid\\\">\\n      <div class=\\\"eight wide column\\\">\\n        <button class=\\\"ui tiny yellow button labeled icon\\\" ><i class=\\\"write icon\\\"></i>Bücher verwalten</button>\\n      </div>\\n      <div class=\\\"eight wide right aligned column\\\">\\n        <button class=\\\"ui tiny green button labeled icon\\\" [routerLink]=\\\"['../bookForm']\\\"><i class=\\\"plus icon\\\"></i>Buch anlegen</button>\\n      </div>\\n    </div>\\n    </div>\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport {BookStoreService} from \"../../shared/book-store.service\";\nimport {AuthService} from \"../../shared/authentication-service\";\nimport {FormBuilder, FormGroup, NgModel} from \"@angular/forms\";\nimport {AddressFactory} from \"../../shared/address-factory\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {Address} from \"../../shared/address\";\nimport {isNullOrUndefined} from \"util\";\nimport {isEmpty, retry} from \"rxjs/internal/operators\";\n\n@Component({\n  selector: 'bs-overview',\n  templateUrl: './overview.component.html',\n  styles: []\n})\nexport class OverviewComponent implements OnInit {\n    addressForm: FormGroup;\n    address = AddressFactory.empty();\n    addresses : Address[];\n    param;\n    idOnIndex;\n\n    countries = [\n        {'id':'DE', 'name':'Deutschland'},\n        {'id':'CH', 'name': 'Schweiz'},\n        {'id':'AT', 'name': 'Österreich'}\n    ];\n\n  constructor(private fb: FormBuilder, private bs: BookStoreService,\n              private route: ActivatedRoute, private router: Router,private authService: AuthService) { }\n\n  ngOnInit() {\n      this.param = this.route.snapshot.params;\n\n\n      if(this.isOverview(this.param.id)){\n          this.bs.getAllAddresses(this.authService.getCurrentUserId()).subscribe(res => {\n              this.addresses = res;\n              this.initEmptyForm();\n          });\n          this.initEmptyForm();\n      }\n      if(!this.isOverview(this.param.id)){\n          this.bs.getAllAddresses(this.authService.getCurrentUserId()).subscribe(res => {\n              this.addresses = res;\n              this.idOnIndex = this.addresses.findIndex(i => i.id === parseInt(this.route.snapshot.params.id));\n              this.initForm();\n          });\n      }\n\n\n  }\n\n  isOverview(id:number){\n      if(isNullOrUndefined(id)) {\n          return true;\n      }\n  }\n\n    initEmptyForm() {\n        this.addressForm = this.fb.group({\n            street: \"\",\n            city: \"\",\n            postcode: \"\",\n            country: \"\",\n            isMain: false\n        });\n    }\n    initForm() {\n      let country;\n\n          if (this.addresses[this.idOnIndex].country == \"Schweiz\"){\n              country = \"CH\"\n          }\n        if (this.addresses[this.idOnIndex].country == \"Österreich\"){\n            country = \"AT\"\n        }\n        if (this.addresses[this.idOnIndex].country == \"Deutschland\"){\n            country = \"DE\"\n        }\n        console.log(this.addresses[this.idOnIndex].isMain);\n\n\n\n        this.addressForm = this.fb.group({\n            street: this.addresses[this.idOnIndex].street,\n            city: this.addresses[this.idOnIndex].city,\n            postcode: this.addresses[this.idOnIndex].postcode,\n            country: country,\n            isMain: this.addresses[this.idOnIndex].isMain\n        });\n    }\n\n\n    submitForm() {\n\n        let address: Address = AddressFactory.fromObject(this.addressForm.value);\n        address.user_id = this.authService.getCurrentUserId();\n\n        if (this.isOverview(this.route.snapshot.params.id)){\n            this.bs.createAddress(address).subscribe(res => {\n                this.router.navigate(['../'], {relativeTo: this.route});\n            });\n        }\n        if(!this.isOverview(this.route.snapshot.params.id)){\n            address.id = this.route.snapshot.params.id;\n            this.bs.updateAddress(address).subscribe(res => {\n                this.router.navigate(['../'], {relativeTo: this.route});\n            });\n        }\n\n        console.log(address);\n\n\n\n    }\n\n    /*updateErrorMessages() {\n        this.errors = {};\n        for (const message of BookFormErrorMessages) {\n            const control = this.bookForm.get(message.forControl);\n            if (control &&\n                control.dirty &&\n                control.invalid &&\n                control.errors[message.forValidator] &&\n                !this.errors[message.forControl]) {\n                this.errors[message.forControl] = message.text;\n            }\n        }\n    }*/\n\n}\n","import { NgModule } from '@angular/core';\r\nimport {Routes, RouterModule} from '@angular/router';\r\n\r\nimport { BookDetailsComponent } from './book-details/book-details.component';\r\nimport { BookListComponent } from './book-list/book-list.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { BookFormComponent } from \"./book-form/book-form.component\";\r\nimport { LoginComponent } from \"./admin/login/login.component\";\r\nimport { OrderListComponent } from \"./order-list/order-list.component\";\r\nimport { OrderOverviewComponent} from \"./order-overview/order-overview.component\";\r\nimport {OrderlogItemComponent} from \"./orderlog-item/orderlog-item.component\";\r\nimport {OrderlogListComponent} from \"./orderlog-list/orderlog-list.component\";\r\nimport {OrderlogFormComponent} from \"./orderlog-form/orderlog-form.component\";\r\nimport {OverviewComponent} from \"./admin/overview/overview.component\";\r\n\r\nconst routes: Routes = [\r\n    { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n    { path: 'home', component: HomeComponent },\r\n    { path: 'books', component: BookListComponent },\r\n    { path: 'cart', component: OrderListComponent },\r\n    { path: 'orders', component: OrderOverviewComponent },\r\n    { path: 'books/:isbn', component: BookDetailsComponent },\r\n    { path: 'orders/:id', component: OrderlogListComponent },\r\n    { path: 'update/:id', component: OrderlogFormComponent },\r\n    { path: 'admin/bookForm', component: BookFormComponent },\r\n    { path: 'admin/bookForm/:isbn', component: BookFormComponent },\r\n    { path: 'admin/address', component: OverviewComponent },\r\n    { path: 'admin/address/update/:id', component: OverviewComponent },\r\n    { path: 'login', component: LoginComponent}\r\n\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(routes)],\r\n    exports: [RouterModule],\r\n    providers: []\r\n})\r\nexport class AppRoutingModule { }","module.exports = \"<div class=\\\"ui {{isLoggedIn()?'six':'four'}} item tabs inverted menu\\\">\\r\\n  <a routerLink=\\\"home\\\" routerLinkActive=\\\"active\\\" class=\\\"item\\\">Home</a>\\r\\n  <a routerLink=\\\"books\\\" routerLinkActive=\\\"active\\\" class=\\\"item\\\">Bücher</a>\\r\\n  <a *ngIf=\\\"isLoggedIn()\\\" routerLink='admin/address' routerLinkActive=\\\"active\\\" class=\\\"item\\\">Administration</a>\\r\\n  <a *ngIf=\\\"isLoggedIn()\\\" routerLink=\\\"orders\\\" routerLinkActive=\\\"active\\\" class=\\\"item\\\">Bestellungen</a>\\r\\n  <a routerLink=\\\"cart\\\" routerLinkActive=\\\"active\\\" class=\\\"item\\\"><div class=\\\"floating ui large red circular label\\\" style=\\\"margin: 2.7em 0em 0em -1.5em !important;\\\" *ngIf=\\\"bs.label == true\\\">1</div>Warenkorb</a>\\r\\n  <a routerLink=\\\"login\\\" routerLinkActive=\\\"active\\\" class=\\\"item\\\">{{getLoginLabel()}}</a>\\r\\n</div>\\r\\n\\r\\n<router-outlet></router-outlet>\"","import {Component, Input} from '@angular/core';\nimport { Book } from './shared/book';\nimport {AuthService} from \"./shared/authentication-service\";\nimport {BookStoreService} from \"./shared/book-store.service\";\n\n@Component({\n  selector: 'bs-root',\n  templateUrl: './app.component.html',\n  styles: []\n})\n\nexport class AppComponent {\n\n  user;\n\n  constructor (private authService : AuthService, private bs: BookStoreService) {\n\n  }\n\n  isLoggedIn(){\n    return this.authService.isLoggedIn()\n  }\n\n  getLoginLabel(){\n    if(this.isLoggedIn()){\n      return \"Logout\";\n    }\n    return \"Login\";\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\n\nimport { AppComponent } from './app.component';\nimport { BookListComponent } from './book-list/book-list.component';\nimport { BookListItemComponent } from './book-list-item/book-list-item.component';\nimport { BookDetailsComponent } from './book-details/book-details.component';\nimport { BookStoreService} from \"./shared/book-store.service\";\nimport { HomeComponent } from './home/home.component';\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport { BookFormComponent } from './book-form/book-form.component';\nimport { LoginComponent } from './admin/login/login.component';\nimport {AuthService} from \"./shared/authentication-service\";\nimport { OrderListComponent } from './order-list/order-list.component';\nimport { OrderListItemComponent } from './order-list-item/order-list-item.component';\nimport {TokenInterceptorService} from \"./shared/token-interceptor.service\";\nimport {JwtInterceptorService} from \"./shared/jwt-interceptor.service\";\nimport { OrderOverviewComponent } from './order-overview/order-overview.component';\nimport { OrderOverviewItemComponent } from './order-overview-item/order-overview-item.component';\nimport { OrderlogItemComponent } from './orderlog-item/orderlog-item.component';\nimport { OrderlogListComponent } from './orderlog-list/orderlog-list.component';\nimport { OrderlogFormComponent } from './orderlog-form/orderlog-form.component';\nimport { OverviewComponent } from './admin/overview/overview.component';\nimport { AddressComponent } from './admin/address/address.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BookListComponent,\n    BookListItemComponent,\n    BookDetailsComponent,\n    HomeComponent,\n    BookFormComponent,\n    LoginComponent,\n    OrderListComponent,\n    OrderListItemComponent,\n    OrderOverviewComponent,\n    OrderOverviewItemComponent,\n    OrderlogItemComponent,\n    OrderlogListComponent,\n    OrderlogFormComponent,\n    OverviewComponent,\n    AddressComponent,\n  ],\n  imports: [\n    BrowserModule, FormsModule, AppRoutingModule, HttpClientModule, ReactiveFormsModule\n  ],\n  providers: [\n      BookStoreService, AuthService, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: TokenInterceptorService,\n          multi: true\n      }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<div *ngIf=\\\"!book\\\" class=\\\"ui active dimmer\\\">\\n  <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n</div>\\n<div class=\\\"ui grid\\\" *ngIf=\\\"book\\\">\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h3>Detailansicht</h3>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"three wide column\\\">\\n      <!--Platzhalter-->\\n    </div>\\n    <div class=\\\"ten wide column\\\">\\n      <div class=\\\"ui grid\\\">\\n        <div class=\\\"column row\\\">\\n          <div class=\\\"six wide column\\\">\\n            <img class=\\\"ui large rounded bordered image\\\" *ngIf=\\\"book.images && book.images[0]\\\"\\n                 [src]=\\\"book.images[0].url\\\">\\n            <div class=\\\"column row\\\">\\n              <div class=\\\"ui tiny images\\\">\\n                <img *ngFor=\\\"let thumbnail of book.images\\\" [src]=\\\"thumbnail.url\\\">\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"ten wide column\\\">\\n              <h1>{{ book.title }} <br/><span class=\\\"ui meta\\\" style=\\\"font-size: medium\\\">{{ book.subtitle }}</span></h1>\\n            <span class=\\\"ui header\\\">von: <br></span>\\n              <span *ngFor=\\\"let author of book.authors; last as l\\\">\\n               {{ author.firstName }} {{ author.lastName }}<span *ngIf=\\\"!l\\\">, </span>\\n              </span><br>\\n            <span class=\\\"ui meta\\\">(ISBN: </span><span> {{ book.isbn }})</span><br>\\n            <span class=\\\"ui meta\\\"><u>erschienen am:</u> </span><span> {{ book.published }}</span>\\n              <br>\\n              <br>\\n              <span class=\\\"ui header\\\">Bewertungen: <br></span>\\n              <i *ngFor=\\\"let r of getRating(book.rating)\\\" class=\\\"yellow star icon\\\"></i>\\n            <div class=\\\"ui divider\\\"></div>\\n            <span class=\\\"ui meta\\\">Preis:     </span> <span class=\\\"ui header\\\" style=\\\"color: brown\\\"> {{book.price}} € </span>\\n              <span class=\\\"ui meta\\\" style=\\\"color: grey\\\"><i> inkl. MwSt.</i></span><br><br>\\n              <div class=\\\"ui grid\\\">\\n                <div class=\\\"column row\\\">\\n                  <div class=\\\"six wide column\\\">\\n                    <div class=\\\"ui fluid right action input\\\">\\n                      <input type=\\\"number\\\" id=\\\"count\\\" value=\\\"1\\\">\\n                      <button class=\\\"ui tiny orange labeled icon button\\\" type=\\\"submit\\\" (click)=\\\"addToCart()\\\">\\n                        in den Warenkorb\\n                        <i class=\\\"cart icon\\\"></i>\\n                      </button>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"twelve wide column\\\">\\n                    <!-- Platzhalter -->\\n                  </div>\\n                </div>\\n              </div>\\n            </div>\\n        </div>\\n        <div class=\\\"column row\\\">\\n          <div class=\\\"sixteen wide column\\\">\\n          <div class=\\\"ui divider\\\"></div>\\n            <div class=\\\"ui header\\\">Beschreibung: </div>\\n            <p>{{ book.description }}</p>\\n            <div class=\\\"ui divider\\\"></div>\\n          <button *ngIf=\\\"authService.isBackendUser()\\\" class=\\\"ui tiny red button labeled icon\\\" (click)=\\\"removeBook()\\\"><i class=\\\"remove icon\\\"></i>Buch löschen</button>\\n          <button *ngIf=\\\"authService.isBackendUser()\\\" class=\\\"ui tiny yellow button labeled icon\\\" [routerLink]=\\\"['../../admin/bookForm/', book?.isbn]\\\"><i class=\\\"write icon\\\"></i>Buch bearbeiten</button>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"three wide column\\\">\\n      <!--Platzhalter-->\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit, Input, Output, EventEmitter, } from '@angular/core';\nimport { Book } from '../shared/book';\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport { BookStoreService } from \"../shared/book-store.service\";\nimport {AuthService} from \"../shared/authentication-service\";\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\nimport {count} from \"rxjs/internal/operators\";\nimport {Address} from \"../shared/address\";\nimport {isNullOrUndefined} from \"util\";\n\n@Component({\n  selector: 'bs-book-details',\n  templateUrl: './book-details.component.html',\n  styles: []\n})\nexport class BookDetailsComponent implements OnInit {\n\n  @Input() book : Book;\n  address : Address;\n\n  constructor(\n      private bs: BookStoreService,\n      private route : ActivatedRoute,\n      private router : Router,\n      private authService : AuthService,\n      private fb: FormBuilder\n  ) { }\n\n  ngOnInit() {\n    const params = this.route.snapshot.params;\n\n\n    if (!isNullOrUndefined(localStorage.getItem('userId'))){\n        const userId = parseInt(localStorage.getItem('userId'));\n\n        this.bs.getMainAddress(userId).subscribe(res => {\n            this.address = res [0];\n        });\n\n        this.bs.getSingle(params['isbn']).subscribe(res => {\n            this.book = res;\n            let percentage = Number(this.address.taxPercentage);\n            let netPrice = Number(0);\n            let priceVal = Number(0);\n            let sum = Number(0);\n            netPrice = Number(this.book.price);\n            priceVal = netPrice * percentage;\n            sum = priceVal + netPrice;\n            sum = Number(sum.toFixed(2));\n            this.book.price = sum;\n\n        });\n    }\n    else {\n        this.bs.getSingle(params['isbn']).subscribe(res => {\n            this.book = res;\n            let percentage = Number(0.10);\n            let netPrice = Number(0);\n            let priceVal = Number(0);\n            let sum = Number(0);\n            netPrice = Number(this.book.price);\n            priceVal = netPrice * percentage;\n            sum = priceVal + netPrice;\n            sum = Number(sum.toFixed(2));\n            this.book.price = sum;\n\n        });\n    }\n\n\n  }\n\n  removeBook(){\n    if(confirm(\"Buch wirklich löschen?\")){\n      this.bs.remove(this.book.isbn)\n          .subscribe(res => this.router.navigate(['../'],\n              {relativeTo: this.route}\n          ));\n    }\n  }\n  addToCart(){\n    let amount = parseInt((<HTMLInputElement>document.getElementById('count')).value);\n    console.log(amount);\n    this.bs.addToCart(this.book.isbn, amount);\n    this.bs.setLabel();\n  }\n\n\n  getRating (num: number) {\n    return new Array(num);\n  }\n\n\n}\n","export class ErrorMessage {\n    constructor(\n        public forControl: string,\n        public forValidator: string,\n        public text: string\n    ) { }\n}\nexport const BookFormErrorMessages = [\n    new ErrorMessage('title', 'required', 'Ein Buchtitel muss angegeben werden'),\n    new ErrorMessage('isbn', 'required', 'Es muss eine ISBN angegeben werden'),\n    new ErrorMessage('isbn', 'minlength', 'Die ISBN muss mindestens 10 Zeichen enthalten'),\n    new ErrorMessage('isbn', 'maxlength', 'Eine ISBN darf höchstens 13 Zeichen haben'),\n    new ErrorMessage('published', 'required', 'Es muss ein Erscheinungsdatum angegeben werden'),\n    new ErrorMessage('authors', 'required', 'Es muss ein Autor angegeben werden'),\n    new ErrorMessage('rating', 'min', 'Bewertung kann nur positive Werte annehmen'),\n    new ErrorMessage('rating', 'max', 'Maximal 10 Sterne erlaubt')\n];","module.exports = \"<div class=\\\"ui grid\\\">\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h3>Buchformular</h3>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n    <div class=\\\"six wide column\\\">\\n      <form  class=\\\"ui large form\\\" [formGroup]=\\\"bookForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\n        <input type=\\\"hidden\\\" name=\\\"id\\\">\\n        <div class=\\\"field\\\">\\n          <label>Buchtitel</label>\\n          <input formControlName=\\\"title\\\">\\n          <div *ngIf=\\\"errors.title\\\" class=\\\"ui negative message\\\"> {{ errors.title }} </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Untertitel</label>\\n          <input formControlName=\\\"subtitle\\\">\\n        </div>\\n        <div class=\\\"field\\\" [class.disabled]=\\\"isUpdatingBook\\\">\\n          <label>ISBN-Nummer</label>\\n          <input formControlName=\\\"isbn\\\">\\n          <div *ngIf=\\\"errors.isbn\\\" class=\\\"ui negative message\\\">{{ errors.isbn }} </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Price</label>\\n          <input type=\\\"number\\\" formControlName=\\\"price\\\">\\n          <div *ngIf=\\\"errors.price\\\" class=\\\"ui negative message\\\"> {{ errors.price }} </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Erscheinungsdatum</label>\\n          <input type=\\\"date\\\" useValueAsDate formControlName=\\\"published\\\">\\n          <div *ngIf=\\\"errors.published\\\" class=\\\"ui negative message\\\">{{ errors.published }}</div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Beschreibung</label>\\n          <textarea formControlName=\\\"description\\\" rows=\\\"3\\\"></textarea>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Rating</label>\\n          <input type=\\\"number\\\" formControlName=\\\"rating\\\">\\n          <div *ngIf=\\\"errors.rating\\\" class=\\\"ui negative message\\\">{{ errors.rating }}</div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Bilder</label>\\n          <div formArrayName=\\\"images\\\">\\n            <div class=\\\"fields\\\" *ngFor=\\\"let control of images?.controls; index as i; last as l\\\" [formGroupName]=\\\"i\\\">\\n              <input type=\\\"hidden\\\" name=\\\"id\\\">\\n              <div class=\\\"nine wide field\\\">\\n                <input formControlName=\\\"url\\\" placeholder=\\\"http://bild{{i+1}}_url\\\">\\n              </div>\\n              <div class=\\\"six wide field\\\">\\n                <input formControlName=\\\"title\\\" placeholder=\\\"Bild{{i+1}}_Titel\\\">\\n              </div>\\n              <div class=\\\"one wide field\\\" *ngIf=\\\"l\\\">\\n                <button (click)=\\\"addThumbnailControl()\\\" class=\\\"ui large button\\\" type=\\\"button\\\">+</button>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Autoren</label>\\n          <div formArrayName=\\\"authors\\\">\\n            <div class=\\\"fields\\\" *ngFor=\\\"let control of authors?.controls; index as i; last as l\\\" [formGroupName]=\\\"i\\\">\\n              <input type=\\\"hidden\\\" name=\\\"id\\\">\\n              <div class=\\\"nine wide field\\\">\\n                <input formControlName=\\\"firstName\\\" placeholder=\\\"firstname\\\">\\n              </div>\\n              <div class=\\\"six wide field\\\">\\n                <input formControlName=\\\"lastName\\\" placeholder=\\\"lastname\\\">\\n              </div>\\n              <div class=\\\"one wide field\\\" *ngIf=\\\"l\\\">\\n                <button (click)=\\\"addThumbnailControlAuthors()\\\" class=\\\"ui large button\\\" type=\\\"button\\\">+</button>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n\\n        <button type=\\\"submit\\\" class=\\\"ui button\\\" [disabled]=\\\"bookForm.invalid\\\">Speichern</button>\\n      </form>\\n    </div>\\n    <div class=\\\"five wide column\\\">\\n      <!-- Platzhalter -->\\n    </div>\\n  </div>\\n</div>\"","import { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\n\nimport { BookFormErrorMessages } from './book-form-error-messages';\nimport {BookFactory} from \"../shared/book-factory\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {Book, Image, Author} from \"../shared/book\";\n\n@Component({\n    selector: 'bs-book-form',\n    templateUrl: './book-form.component.html'\n})\n\nexport class BookFormComponent implements OnInit {\n    bookForm: FormGroup;\n    book = BookFactory.empty();\n    errors: { [key: string]: string } = {};\n    isUpdatingBook = false;\n    images: FormArray;\n    authors: FormArray;\n\n    constructor(private fb: FormBuilder, private bs: BookStoreService,\n                private route: ActivatedRoute, private router: Router) { }\n\n    ngOnInit() {\n        const isbn = this.route.snapshot.params['isbn'];\n        if (isbn) {\n            this.isUpdatingBook = true;\n            this.bs.getSingle(isbn).subscribe(book => {\n                this.book = book;\n                this.initBook();\n            });\n        }\n        this.initBook();\n    }\n\n    //Methode aufrufen\n    initBook() {\n        this.buildThumbnailsArray();\n        this.buildAuthorThumbnailsArray();\n\n\n        this.bookForm = this.fb.group({\n            id: this.book.id,\n            title: [this.book.title, Validators.required],\n            subtitle: this.book.subtitle,\n            isbn: [this.book.isbn, [\n                Validators.required,\n                //Validators.minLength(10),\n                Validators.maxLength(13)\n            ]],\n            price: this.book.price,\n            description: this.book.description,\n            rating: [this.book.rating,[\n                Validators.min(0),\n                Validators.max(10)\n            ]],\n            authors: this.authors,\n            images: this.images,\n            published: new Date(this.book.published)\n        });\n        this.bookForm.statusChanges.subscribe(() => this.updateErrorMessages());\n    }\n\n    buildThumbnailsArray() {\n        console.log(this.book.images);\n        if(this.book.images.length == 0){ //if new book had no images -> but no in edit mode\n            this.book.images.push(new Image(0,'',''))\n        }\n\n        //für jedes der bilder gibt es kleines subformular\n        this.images = this.fb.array(\n            this.book.images.map(\n                t => this.fb.group({\n                    id: this.fb.control(t.id),\n                    url: this.fb.control(t.url),\n                    title: this.fb.control(t.title)\n                })\n            )\n        );\n        console.log(this.images);\n    }\n\n    buildAuthorThumbnailsArray(){\n        console.log(this.book.authors);\n        if(this.book.authors.length == 0){ //if new book had no images -> but no in edit mode\n            this.book.authors.push(new Author(0,'',''))\n        }\n\n        //für jedes der bilder gibt es kleines subformular\n        this.authors = this.fb.array(\n            this.book.authors.map(\n                t => this.fb.group({\n                    id: this.fb.control(t.id),\n                    firstName: this.fb.control(t.firstName),\n                    lastName: this.fb.control(t.lastName)\n                })\n            )\n        );\n        console.log(this.authors);\n    }\n\n    addThumbnailControl() {\n        this.images.push(this.fb.group({ url: null, title: null }));\n    }\n\n    addThumbnailControlAuthors() {\n        this.authors.push(this.fb.group({ firstName: null, lastName: null }));\n    }\n\n    submitForm() {\n        //wir bauen im hintergrund daten zusammen\n        //haben events die feuern wenn man was schreibt\n        //validieren das in echtzeit\n        //dann aus daten von Formular ein Buchobjekt basteln\n        //das nutzt dann service methoden für speichern und updaten\n\n        // filter empty values\n        this.bookForm.value.images = this.bookForm.value.images.filter(thumbnail => thumbnail.url);\n\n        // filter empty values\n        this.bookForm.value.authors = this.bookForm.value.authors.filter(thumbnail => thumbnail.firstName);\n\n        //aus Datenstruktur von Formular Buchobjekt machen\n        const book: Book = BookFactory.fromObject(this.bookForm.value);\n        //deep copy  - did not work without?? - checkt er nicht automatisch\n        //nochmal zuweisen\n        book.images = this.bookForm.value.images;\n\n\n        //just copy the authors\n        book.authors = this.bookForm.value.authors;\n        console.log(book);\n        //entweder buch updaten\n        if (this.isUpdatingBook) {\n            this.bs.update(book).subscribe(res => {\n                this.router.navigate(['../../books', book.isbn], { relativeTo: this.route });\n            });\n        } else {\n            //soll später die id des eingeloggten users sein\n            book.user_id = 1;\n            console.log(book);\n            //formular zurücksetzen\n            this.bs.create(book).subscribe(res => {\n                this.book = BookFactory.empty();\n                this.bookForm.reset(BookFactory.empty());\n                this.router.navigate(['../books'], { relativeTo: this.route });\n            });\n        }\n    }\n\n    updateErrorMessages() {\n        this.errors = {};\n        for (const message of BookFormErrorMessages) {\n            const control = this.bookForm.get(message.forControl);\n            if (control &&\n                control.dirty &&\n                control.invalid &&\n                control.errors[message.forValidator] &&\n                !this.errors[message.forControl]) {\n                this.errors[message.forControl] = message.text;\n            }\n        }\n    }\n}","module.exports = \" <img class=\\\"ui tiny image\\\"\\n         *ngIf=\\\"book?.images[0]\\\"\\n         [src]=\\\"book.images[0].url\\\">\\n    <div class=\\\"content\\\" >\\n      <div class=\\\"header\\\">{{ book.title }}</div>\\n      <div class=\\\"description\\\"> {{ book.subtitle }} </div>\\n      <div class=\\\"metadata\\\">\\n          <span *ngFor=\\\"let author of book.authors; last as l\\\">\\n            {{ author.firstName }} {{ author.lastName }}<span *ngIf=\\\"!l\\\">, </span>\\n          </span>\\n      </div>\\n      <div class=\\\"extra\\\">ISBN {{ book.isbn }}</div>\\n        <div class=\\\"header\\\">Preis: {{ book.price | number:'1.2-5'}} €</div>\\n    </div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport {Book} from '../shared/book';\nimport {FormBuilder} from \"@angular/forms\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../shared/authentication-service\";\n\n@Component({\n  selector: 'a.bs-book-list-item',\n  templateUrl: './book-list-item.component.html',\n  styles: []\n})\nexport class BookListItemComponent implements OnInit {\n  @Input() book: Book;\n  taxPercentage : number;\n  result :number;\n\n  constructor(private fb: FormBuilder, private bs: BookStoreService,\n              private route: ActivatedRoute, private router: Router,private authService: AuthService) { }\n\n  ngOnInit() {\n\n\n\n  }\n\n}\n","module.exports = \"<!--<div *ngIf=\\\"!book\\\" class=\\\"ui active dimmer\\\">\\n  <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n</div>-->\\n<div class=\\\"ui grid\\\" *ngIf=\\\"books\\\">\\n  <div *ngIf=\\\"!books\\\" class=\\\"ui active dimmer\\\">\\n    <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h3>Bücherliste</h3>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\" *ngIf=\\\"books\\\">\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n    <div class=\\\"ten wide column\\\">\\n      <div class=\\\"ui middle aligned selection divided list\\\">\\n      <a *ngFor=\\\"let book of books\\\" class=\\\"item bs-book-list-item\\\"\\n      [book]=\\\"book\\\" [routerLink]=\\\"book.isbn\\\"></a>\\n      </div>\\n    </div>\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n  </div>\\n  <p *ngIf=\\\"books && !books.length\\\">\\n    Es sind keine Bücher vorhanden!\\n  </p>\\n</div>\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { Book, Image, Author } from '../shared/book';\nimport { BookStoreService} from \"../shared/book-store.service\";\nimport {Address} from \"../shared/address\";\nimport {AuthService} from \"../shared/authentication-service\";\nimport {isNullOrUndefined} from \"util\";\nimport {el} from \"@angular/platform-browser/testing/src/browser_util\";\n\n@Component({\n  selector: 'bs-book-list',\n  templateUrl: './book-list.component.html',\n  styles: []\n})\nexport class BookListComponent implements OnInit {\n\n    books : Book[];\n    address : Address;\n\n    constructor (private bs : BookStoreService) {}\n\n    ngOnInit() {\n        if(!isNullOrUndefined(localStorage.getItem('userId'))){\n            const userId = parseInt(localStorage.getItem('userId'));\n\n            this.bs.getMainAddress(userId).subscribe(res => {\n                this.address = res[0];\n            });\n\n            this.bs.getAll().subscribe(res => {\n                this.books = res;\n                let percentage = Number(this.address.taxPercentage);\n                let netPrice = Number(0);\n                let priceVal = Number(0);\n                let sum = Number(0);\n                for(let i = 0; i < this.books.length; i++){\n                    netPrice = Number(this.books[i].price);\n                    priceVal = netPrice * percentage;\n                    sum = priceVal + netPrice;\n                    sum = Number(sum.toFixed(2));\n                    this.books[i].price = sum;\n                }\n            });\n\n        }\n        else {\n            this.bs.getAll().subscribe(res => {\n                this.books = res;\n                let percentage = Number(0.10);\n                let netPrice = Number(0);\n                let priceVal = Number(0);\n                let sum = Number(0);\n                for(let i = 0; i < this.books.length; i++){\n                    netPrice = Number(this.books[i].price);\n                    priceVal = netPrice * percentage;\n                    sum = priceVal + netPrice;\n                    sum = Number(sum.toFixed(2));\n                    this.books[i].price = sum;\n                }\n            });\n        }\n\n\n    }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'bs-home',\n  template: `\n    <p>\n      home works!\n    </p>\n  `,\n  styles: []\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<img class=\\\"ui tiny image\\\"\\n     *ngIf=\\\"book?.images[0]\\\"\\n     [src]=\\\"book.images[0].url\\\">\\n<div class=\\\"content\\\">\\n  <div class=\\\"header\\\">{{ book.title }}</div>\\n  <div class=\\\"description\\\"> {{ book.subtitle }} </div>\\n  <div class=\\\"metadata\\\">\\n      <span *ngFor=\\\"let author of book.authors; last as l\\\">\\n        {{ author.firstName }} {{ author.lastName }}<span *ngIf=\\\"!l\\\">, </span>\\n      </span>\\n  </div>\\n  <div class=\\\"extra\\\">ISBN {{ book.isbn }}</div>\\n    <div class=\\\"header\\\"> {{ book.price | number:'1.2-5'}} €</div>\\n  <br>\\n    <div class=\\\"ui mini left icon input\\\">\\n      <i class=\\\"tags icon\\\"></i>\\n      <input type=\\\"number\\\" value=\\\"{{ book.amount }}\\\" (keyup.enter)=\\\"editAmount()\\\" id=\\\"amount_{{book.id}}\\\">\\n    </div>\\n  <br>\\n  <br>\\n  <button class=\\\"ui tiny red button labeled icon\\\" (click)=\\\"removeBookFromCart(book.isbn)\\\" ><i class=\\\"delete icon\\\"></i>\\n    Löschen</button>\\n</div>\\n<!--[routerLink]=\\\"['../../shoppingcart', book?.isbn]\\\"-->\\n<!--(click)=\\\"deleteBook(book?.isbn, count)\\\"-->\\n\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Order} from \"../shared/order\";\nimport {Book} from \"../shared/book\";\nimport {BookStoreService} from \"../shared/book-store.service\";\n\n@Component({\n  selector: 'a.bs-order-list-item',\n  templateUrl: './order-list-item.component.html',\n  styles: []\n})\nexport class OrderListItemComponent implements OnInit {\n  @Input() book: Book;\n\n\n  constructor(private bs: BookStoreService) {\n  }\n\n  ngOnInit() {\n\n\n  }\n\n    removeBookFromCart(isbn:string){\n      this.bs.removeBookFromCart(isbn);\n        window.location.reload();\n    }\n\n    editAmount(){\n        let amount = parseInt((<HTMLInputElement>document.getElementById('amount_'+this.book.id)).value);\n        this.bs.editCart(this.book.isbn, amount);\n        window.location.reload();\n    }\n}\n","module.exports = \"<div *ngIf=\\\"!booksForOrder\\\" class=\\\"ui active dimmer\\\">\\n  <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n</div>\\n<div class=\\\"ui grid\\\" *ngIf=\\\"booksForOrder\\\">\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"sixteen wide column\\\">\\n      <div class=\\\"ui horizontal divider\\\">\\n        <h3>Die Übersicht ihres Warenkorb</h3>\\n      </div>\\n    </div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n      <div class=\\\"seven wide column\\\">\\n        <div class=\\\"ui middle aligned selection divided list\\\">\\n          <a *ngFor=\\\"let book of booksForOrder\\\" class=\\\"item bs-order-list-item\\\"\\n             [book]=\\\"book\\\">\\n          </a>\\n        </div>\\n      </div>\\n      <div class=\\\"three wide right aligned column\\\" *ngIf=\\\"authService.isLoggedIn()\\\">\\n        <div class=\\\"ui horizontal divider\\\">\\n          <h4>Lieferadresse</h4>\\n        </div>\\n        <table class=\\\"ui grey large table\\\">\\n          <thead>\\n          <tr>\\n            <th class=\\\"right aligned\\\">{{address.country}}</th>\\n          </tr>\\n          </thead>\\n          <tbody>\\n          <tr>\\n            <td class=\\\"right aligned\\\">{{address.street}}</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"right aligned\\\">{{address.postcode}}</td>\\n          </tr>\\n          <tr>\\n            <td class=\\\"right aligned\\\">{{address.city}}</td>\\n          </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n      <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n      </div>\\n  </div>\\n  <div class=\\\"ui horizontal divider\\\">\\n    <h3> - </h3>\\n  </div>\\n    <div class=\\\" column row\\\">\\n      <div class=\\\"ten wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n        <div class=\\\"three wide right aligned column\\\">\\n          <h3 class=\\\"right aligned\\\" *ngIf=\\\"authService.isLoggedIn()\\\">Gesamt: {{ booksForOrder[\\\"sum\\\"] | number:'1.2-5' }} € <h5 style=\\\"color: grey\\\"><i>inkl. {{address.taxPercentage * 100}} % Steuern </i></h5></h3>\\n          <h3 class=\\\"right aligned\\\" *ngIf=\\\"!authService.isLoggedIn()\\\">Gesamt: {{ booksForOrder[\\\"sum\\\"] | number:'1.2-5' }} € <h5 style=\\\"color: grey\\\"><i>inkl. 10 % Steuern </i></h5></h3>\\n          <button class=\\\"ui tiny green button labeled icon\\\" [routerLink]=\\\"['../books']\\\"><i class=\\\"search icon\\\"></i> <!---->\\n            Weiterstöbern</button>\\n          <button *ngIf=\\\"authService.isLoggedIn()\\\" class=\\\"ui tiny yellow button labeled icon\\\" (click)=\\\"orderIt()\\\"><i class=\\\"cart icon\\\"></i>\\n            Bestellen </button><!--[routerLink]=\\\"['../../books']\\\"-->\\n        </div>\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n    </div>\\n</div>\\n\\n\\n\\n\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { Book } from \"../shared/book\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport { BookStoreService} from \"../shared/book-store.service\";\nimport {AuthService} from \"../shared/authentication-service\";\n\nimport {Order} from \"../shared/order\";\nimport {of} from \"rxjs\";\nimport {forEach} from \"@angular/router/src/utils/collection\";\nimport {OrderListItemComponent} from \"../order-list-item/order-list-item.component\";\nimport {OrderFactory} from \"../shared/order-factory.service\";\nimport {isNullOrUndefined} from \"util\";\nimport {Address} from \"../shared/address\";\nimport {takeLast} from \"rxjs/internal/operators\";\n\n\n@Component({\n  selector: 'bs-order-list',\n  templateUrl: './order-list.component.html',\n  styles: []\n})\nexport class OrderListComponent implements OnInit {\n\n  private booksForOrder = [];\n  private order : Order;\n  private address : Address;\n\n\n\n  constructor(private bs: BookStoreService, private route: ActivatedRoute, private router: Router, private authService : AuthService,) {\n    this.order = OrderFactory.empty();\n  }\n\n  ngOnInit() {\n      this.bs.unsetLabel();\n\n      if(!isNullOrUndefined(localStorage.getItem('userId'))){\n          this.bs.getMainAddress(this.authService.getCurrentUser()).subscribe(res => {\n              this.address = res[0];\n              this.address.taxPercentage = Number(this.address.taxPercentage);\n              this.getBook();\n\n          });\n      }\n      else {\n          const cart = JSON.parse(localStorage.getItem('cart'));\n\n          this.booksForOrder[\"sum\"] = 0;\n          if (!isNullOrUndefined(cart.length)){\n              for (let i = 0; i < cart.length; i++){\n                  let isbn = cart[i].isbn;\n                  this.bs.getSingle(isbn).subscribe(result => {\n                      result.amount = cart[i].count;\n                      result.price *= cart[i].count;\n                      let percentage = Number(0.10);\n                      let netPrice = Number(0);\n                      let priceVal = Number(0);\n                      let sum = Number(0);\n                      netPrice = result.price;\n                      priceVal = netPrice * percentage;\n                      sum = priceVal + netPrice;\n                      sum = Number(sum.toFixed(2));\n                      result.price = sum;\n                      this.booksForOrder[\"sum\"] += sum;\n                      this.booksForOrder.push(result);\n                  });\n              }\n          }\n      }\n\n\n  }\n    getBook(){\n        const cart = JSON.parse(localStorage.getItem('cart'));\n\n        this.booksForOrder[\"sum\"] = 0;\n        if (!isNullOrUndefined(cart.length)){\n            for (let i = 0; i < cart.length; i++){\n                let isbn = cart[i].isbn;\n                this.bs.getSingle(isbn).subscribe(result => {\n                    result.amount = cart[i].count;\n                    result.price *= cart[i].count;\n                    let percentage = Number(this.address.taxPercentage);\n                    let netPrice = Number(0);\n                    let priceVal = Number(0);\n                    let sum = Number(0);\n                    netPrice = result.price;\n                    priceVal = netPrice * percentage;\n                    sum = priceVal + netPrice;\n                    sum = Number(sum.toFixed(2));\n                    result.price = sum;\n                    this.booksForOrder[\"sum\"] += sum;\n                    this.booksForOrder.push(result);\n                });\n            }\n        }\n    }\n\n    orderIt(){\n\n      this.order.user_id = this.authService.getCurrentUserId();\n      this.order.addressId = this.address.id;\n\n      for (let i = 0;i < (this.booksForOrder.length); i++){\n        this.order.books.push(this.booksForOrder[i]);\n      }\n\n      this.bs.createOrder(this.order).subscribe(res=>{\n          localStorage.removeItem('cart');\n          this.router.navigate(['../books'], {relativeTo: this.route});\n      });\n\n      console.log(this.order);\n\n    }\n\n}\n","module.exports = \"<div class=\\\"ui grid\\\" *ngIf=\\\"order\\\">\\n    <div class=\\\"column row\\\">\\n    <!--<div class=\\\"\\\"-->\\n      <div class=\\\"ui four top attached small steps\\\">\\n        <div [ngClass]=\\\"{\\n        completed: !stepOne(),\\n        active: stepOne()\\n            }\\\" class=\\\"step\\\">\\n          <i class=\\\"payment icon\\\" *ngIf=\\\"!stepOne()\\\"></i>\\n          <img class=\\\"ui tiny image\\\" [src]=\\\"bs.getImage(orderStatus[0])\\\" *ngIf=\\\"stepOne()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Bestellungseingang</div>\\n            <div class=\\\"description\\\">Choose your </div>\\n          </div>\\n        </div>\\n        <div [ngClass]=\\\"{\\n        completed: !stepTwo() && !stepOne(),\\n        active: stepTwo()\\n            }\\\" class=\\\"step\\\">\\n          <i class=\\\"payment icon\\\" *ngIf=\\\"!stepTwo() && !stepOne()\\\"></i>\\n          <img class=\\\"ui tiny spaced image\\\" [src]=\\\"bs.getImage(orderStatus[1])\\\" *ngIf=\\\"stepTwo() || stepOne()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Bearbeitung</div>\\n            <div class=\\\"description\\\">Choose your </div>\\n          </div>\\n        </div>\\n        <div [ngClass]=\\\"{\\n        completed: !stepTwo() && !stepOne() && !stepThree(),\\n        active: stepThree()\\n            }\\\" class=\\\"step\\\">\\n          <i class=\\\"payment icon\\\" *ngIf=\\\"!stepTwo() && !stepOne() && !stepThree()\\\"></i>\\n          <img class=\\\"ui tiny spaced image\\\" [src]=\\\"bs.getImage(orderStatus[2])\\\" *ngIf=\\\"stepThree() || stepOne() || stepTwo()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Versandt</div>\\n          </div>\\n        </div>\\n        <div [ngClass]=\\\"{\\n        completed: stepFour()\\n            }\\\" class=\\\"step\\\">\\n          <i class=\\\"payment icon\\\" *ngIf=\\\"stepFour()\\\"></i>\\n          <img class=\\\"ui tiny spaced image\\\" [src]=\\\"bs.getImage(orderStatus[3])\\\" *ngIf=\\\"!stepFour()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Zugestellt</div>\\n          </div>\\n        </div>\\n        <div [ngClass]=\\\"{\\n        active: returnedOrder()\\n            }\\\" class=\\\"step\\\" *ngIf=\\\"returnedOrder()\\\">\\n          <img class=\\\"ui tiny spaced image\\\" [src]=\\\"bs.getImage(orderStatus[4])\\\" *ngIf=\\\"returnedOrder()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Zurückgesandt</div>\\n          </div>\\n        </div>\\n        <div [ngClass]=\\\"{\\n        active: cancelledOrder()\\n            }\\\" class=\\\"step\\\" *ngIf=\\\"cancelledOrder()\\\">\\n          <img class=\\\"ui tiny spaced image\\\" [src]=\\\"bs.getImage(orderStatus[-1])\\\" *ngIf=\\\"cancelledOrder()\\\">\\n          <div class=\\\"content\\\">\\n            <div class=\\\"title\\\">Stoniert</div>\\n          </div>\\n        </div>\\n      </div><!-- steps end -->\\n        <div class=\\\"ui attached segment\\\">\\n          <div class=\\\"ui grid\\\">\\n            <div class=\\\"column inverted row\\\">\\n              <div class=\\\"four wide column\\\">\\n                <div class=\\\"header\\\">BestellID: {{order.id}}</div>\\n              </div>\\n              <div class=\\\"four wide column\\\">\\n                <div class=\\\"metadata\\\">vom {{date}}</div>\\n              </div>\\n              <div class=\\\"four wide column\\\">\\n                <div class=\\\"description\\\">Gesamtpreis: {{ order.grossAmount }} €</div>\\n              </div>\\n              <div class=\\\"four wide column\\\">\\n                <div class=\\\"description\\\"> {{ order.addressId }} </div>\\n              </div>\\n            </div>\\n\\n            <div class=\\\"column row\\\">\\n              <!--<img class=\\\"ui large rounded bordered image\\\" *ngIf=\\\"book.images && book.images[0]\\\"\\n                   [src]=\\\"book.images[0].url\\\">-->\\n              <div class=\\\"metadata\\\">\\n                <span><h3>Bücher: </h3><br></span>\\n                <span class=\\\"description\\\" *ngFor=\\\"let book of order.books; last as l\\\">\\n                  <div>{{ book.title }}, {{ book.subtitle }} - {{ book.price }}</div>\\n                <span *ngIf=\\\"!l\\\">, </span>\\n                </span>\\n              </div>\\n            </div>\\n\\n          </div><!-- second ui grid ends -->\\n        </div>\\n    </div>\\n</div>\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Order} from \"../shared/order\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {Book} from \"../shared/book\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../shared/authentication-service\";\n\n@Component({\n  selector: 'a.bs-order-overview-item',\n  templateUrl: './order-overview-item.component.html',\n  styles: []\n})\nexport class OrderOverviewItemComponent implements OnInit {\n  @Input() order : Order;\n  @Input() book : Book;\n  private date;\n    private booksInShoppingCart = [];\n    private orderStatus = [\n        \"Bestellung eingegangen\",\n        \"in Bearbeitung\",\n        \"Versandt\",\n        \"Zugestellt\",\n        \"Zurückgesandt\",\n        \"Stoniert\"\n    ];\n\n  constructor(private bs: BookStoreService,\n              private router: Router,\n              private route : ActivatedRoute,\n              private authService : AuthService) { }\n\n  ngOnInit() {\n    let temp = JSON.stringify(this.order.created_at);\n    this.date = temp.slice(1,11);\n      console.log(this.order.status);\n      //console.log(parseInt(this.order.status));\n\n  }\n\n  stepOne(){\n    if(this.order.status == \"Bestellung eingegangen\"){\n      return true\n    }\n      return false;\n  }\n  stepTwo(){\n    if(this.order.status == \"in Bearbeitung\"){\n        return true\n    }\n      return false;\n  }\n  stepThree(){\n    if(this.order.status == \"Versandt\"){\n        return true\n    }\n      return false;\n  }\n  stepFour(){\n    if(this.order.status == \"Zugestellt\"){\n        return true\n    }\n      return false;\n  }\n  cancelledOrder(){\n    if(this.order.status == \"Zurückgesandt\"){\n          return true\n    }\n    return false;\n  }\n\n  returnedOrder(){\n    if(this.order.status == \"Stoniert\"){\n        return true\n    }\n    return false;\n  }\n\n}\n","module.exports = \"<div class=\\\"ui grid\\\">\\n  <div *ngIf=\\\"!orders\\\" class=\\\"ui active dimmer\\\">\\n    <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n    <div class=\\\"ten wide column\\\">\\n      <div class=\\\"ui grid\\\">\\n        <div class=\\\"column row\\\" *ngIf=\\\"authService.isBackendUser()\\\">\\n          <div class=\\\"four wide column\\\">\\n          <span>Filtern: </span>\\n            <button class=\\\"ui icon button\\\" (click)=\\\"sortDesc()\\\">\\n              <i class=\\\"arrow alternate circle down icon\\\"></i>\\n            </button>\\n            <button class=\\\"ui icon button\\\" (click)=\\\"sortAsc()\\\">\\n              <i class=\\\"arrow alternate circle up icon\\\"></i>\\n            </button>\\n          </div>\\n            <div class=\\\"four wide column\\\">\\n              <!--Platzhalter -->\\n            </div>\\n          <div class=\\\"eight wide column\\\">\\n            <div class=\\\"ui compact menu\\\" *ngIf=\\\"authService.isBackendUser()\\\">\\n              <div class=\\\"ui simple dropdown item\\\">\\n                Nach Status:\\n                <i class=\\\"dropdown icon\\\"></i>\\n                <div class=\\\"menu\\\">\\n                  <div class=\\\"item\\\" id=\\\"0\\\" (click)=\\\"sortByStatus(0)\\\">Eingegangen</div>\\n                  <div class=\\\"item\\\" id=\\\"1\\\" (click)=\\\"sortByStatus(1)\\\">in Bearbeitung</div>\\n                  <div class=\\\"item\\\" id=\\\"2\\\" (click)=\\\"sortByStatus(2)\\\">Versandt</div>\\n                  <div class=\\\"item\\\" id=\\\"3\\\" (click)=\\\"sortByStatus(3)\\\">Zugestellt</div>\\n                  <div class=\\\"item\\\" id=\\\"4\\\" (click)=\\\"sortByStatus(4)\\\">Zurückgesandt</div>\\n                  <div class=\\\"item\\\" id=\\\"-1\\\" (click)=\\\"sortByStatus(-1)\\\">Stoniert</div>\\n                </div>\\n              </div>\\n            </div>\\n            <div class=\\\"ui right alinged left icon input\\\" *ngIf=\\\"authService.isBackendUser()\\\">\\n              <input type=\\\"number\\\" id=\\\"userID\\\" (keyup.enter)=\\\"getOrderByUserId()\\\" placeholder=\\\"filtern nach UserID...\\\" value=\\\"1\\\">\\n              <i class=\\\"users icon\\\"></i>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n  </div> <!-- End Row -->\\n    <div class=\\\"column row\\\">\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n      <div class=\\\"ten wide column\\\">\\n        <div class=\\\"ui horizontal divider\\\">\\n          <h3>Übersicht <span *ngIf=\\\"authService.isBackendUser()\\\">aller</span><span *ngIf=\\\"!authService.isBackendUser()\\\">ihrer</span> Bestellungen</h3>\\n        </div>\\n      </div>\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n    </div>\\n    <div class=\\\"column row\\\">\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n      <div class=\\\"ten wide column\\\">\\n        <div class=\\\"ui middle aligned selection divided list\\\">\\n          <a *ngFor=\\\"let order of orders\\\" class=\\\"item bs-order-overview-item\\\"\\n             [order]=\\\"order\\\" [routerLink]=\\\"order.id\\\">\\n          </a>\\n        </div>\\n      </div>\\n      <div class=\\\"three wide column\\\">\\n        <!--platzhalter-->\\n      </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { OrderFactory} from \"../shared/order-factory.service\";\nimport {Order} from \"../shared/order\";\nimport {Book} from \"../shared/book\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {BookFactory} from \"../shared/book-factory\";\nimport {Router, ActivatedRoute} from \"@angular/router\";\nimport {of} from \"rxjs\";\nimport {AuthService} from \"../shared/authentication-service\";\n\n@Component({\n    selector: 'bs-order-overview',\n    templateUrl: './order-overview.component.html',\n    styles: []\n})\nexport class OrderOverviewComponent implements OnInit {\n\n    orders : Order[];\n    user : number;\n\n\n    //dependency injection\n    constructor (private bs : BookStoreService, private authService : AuthService){}\n\n    ngOnInit() {\n        //for FrontendUser\n\n            if (this.authService.isBackendUser()) {\n                this.bs.getAllOrders().subscribe(\n                    res => {\n                        this.orders = res;\n                        for (let i = 0; i < res.length; i++) {\n                            this.orders[i].status = this.bs.translateStatus(res[i].status);\n                        }\n                    });\n            }\n            else {\n                this.bs.getOrdersWithUserId(this.authService.getCurrentUserId()).subscribe(\n                    res => {\n                        this.orders = res;\n                        for (let i = 0; i < res.length; i++) {\n                            this.orders[i].status = this.bs.translateStatus(res[i].status);\n                        }\n                    });\n            }\n\n\n    }\n\n    sortDesc() {\n        this.bs.sortDesc().subscribe(\n            res => {\n                this.orders = res;\n                for (let i = 0; i < res.length; i++) {\n                    this.orders[i].status = this.bs.translateStatus(res[i].status);\n                }\n            });\n    }\n    sortAsc() {\n        this.bs.sortAsc().subscribe(\n            res => {\n                this.orders = res;\n                console.log(this.orders);\n                for (let i = 0; i < res.length; i++) {\n                    this.orders[i].status = this.bs.translateStatus(res[i].status);\n                }\n            });\n    }\n\n    sortByStatus(status:number){\n        this.bs.sortByStatus(status).subscribe(\n            res => {\n                this.orders = res;\n                for (let i = 0; i < res.length; i++) {\n                    this.orders[i].status = this.bs.translateStatus(res[i].status);\n                }\n            });\n    }\n\n    getOrderByUserId(){\n        let userID = parseInt((<HTMLInputElement>document.getElementById('userID')).value);\n        console.log(userID);\n        if(userID){\n            this.bs.getOrdersWithUserId(userID).subscribe( res => {\n                this.orders = res;\n                for (let i = 0; i < res.length; i++) {\n                    this.orders[i].status = this.bs.translateStatus(res[i].status);\n                }\n            });\n        }\n    }\n\n\n}\n","module.exports = \"<div class=\\\"ui grid\\\">\\n  <div class=\\\"four column row\\\">\\n    <div class=\\\"four wide column\\\">\\n\\n    </div>\\n    <div class=\\\"eight wide column\\\">\\n      <h1>Bestellstatus updaten</h1>\\n      <form class=\\\"ui large form\\\" [formGroup]=\\\"orderlogForm\\\" (ngSubmit)=\\\"submitForm()\\\">\\n        <input type=\\\"hidden\\\" name=\\\"id\\\">\\n        <div class=\\\"field four wide column\\\">\\n          <label>Neuer Status</label>\\n          <select class=\\\"ui dropdown\\\" id=\\\"status\\\" formControlName=\\\"status\\\">\\n            <option *ngFor=\\\"let state of statusForm\\\" [value]=\\\"state.id\\\">{{state.name}}</option>\\n          </select>\\n        </div>\\n        <div class=\\\"field\\\">\\n          <label>Kundennotiz</label>\\n          <textarea formControlName=\\\"note\\\" rows=\\\"3\\\"></textarea>\\n        </div>\\n        <div class=\\\"field\\\" >\\n          <label>Adminnotiz</label>\\n          <textarea formControlName=\\\"adminNote\\\" rows=\\\"3\\\"></textarea>\\n        </div>\\n\\n        <button type=\\\"submit\\\" class=\\\"ui button\\\" [disabled]=\\\"orderlogForm.invalid\\\">Speichern</button>\\n      </form>\\n    </div>\\n    <div class=\\\"four wide column\\\">\\n\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../shared/authentication-service\";\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\nimport {OrderlogFactoryService} from \"../shared/orderlog-factory.service\";\nimport {Orderlog} from \"../shared/orderlog\";\nimport {Order} from \"../shared/order\";\n\n@Component({\n  selector: 'bs-orderlog-form',\n  templateUrl: './orderlog-form.component.html',\n  styles: []\n})\nexport class OrderlogFormComponent implements OnInit {\n    orderlogForm: FormGroup;\n    orderlog = OrderlogFactoryService.empty();\n    order : Order;\n    link;\n    statusForm = [{'id':0, 'name':'Eingegangen'},\n        {'id':1, 'name': 'in Bearbeitung'},\n        {'id':2, 'name': 'Versandt'},\n        {'id':3, 'name': 'Zugestellt'},\n        {'id':4, 'name': 'Zurückgesandt'},\n        {'id':-1, 'name': 'Stoniert'},\n    ];\n\n  constructor(private bs: BookStoreService,\n              private router: Router,\n              private route : ActivatedRoute,\n              private authService : AuthService,\n              private fb: FormBuilder) { }\n\n  ngOnInit() {\n    this.link = this.route.snapshot.params['id'];\n    console.log(this.link);\n\n    this.bs.getStatusOfOrder(this.link).subscribe(res => {\n      this.orderlog.status = res[0].status;\n      this.initOrder();\n    });\n      this.initOrder();\n\n  }\n\n    initOrder() {\n        this.orderlogForm = this.fb.group({\n            status: \"\",\n            note: \"\",\n            adminNote: \"\",\n        });\n    }\n    submitForm() {\n\n        const orderlog: Orderlog = OrderlogFactoryService.fromObject(this.orderlogForm.value);\n        orderlog.order_id = this.link;\n\n        console.log(orderlog);\n\n        this.bs.updateOrder(orderlog).subscribe(res => {\n          this.router.navigate(['../../orders'], {relativeTo: this.route});\n        });\n\n    }\n\n\n}\n","module.exports = \"<br>\\n<div class=\\\"ui grid middle aligned\\\">\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"two wide column\\\">\\n      <img class=\\\"ui small circular image bordered\\\" [src]=\\\"bs.getImage(orderlog.status)\\\">\\n    </div>\\n    <div class=\\\"twelve wide column\\\">\\n      <div class=\\\"header\\\">Aktualisiert am: {{ orderlog.updated_at }} </div>\\n      <div class=\\\"metadata\\\">\\n        Kundennotiz: {{orderlog.note}}\\n      </div>\\n      <div class=\\\"metadata\\\" *ngIf=\\\"authService.isBackendUser()\\\">\\n        Adminnotiz: {{orderlog.adminNote}}\\n      </div>\\n      <div class=\\\"header\\\">Status: {{ orderlog.status }} </div>\\n    </div>\\n  </div>\\n</div>\\n<br>\\n\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Order} from \"../shared/order\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../shared/authentication-service\";\nimport {Orderlog} from \"../shared/orderlog\";\n\n@Component({\n  selector: 'div.bs-orderlog-item',\n  templateUrl: './orderlog-item.component.html',\n  styles: []\n})\nexport class OrderlogItemComponent implements OnInit {\n  @Input() orderlog : Orderlog;\n\n\n  constructor(private bs: BookStoreService,\n              private router: Router,\n              private route : ActivatedRoute,\n              private authService : AuthService\n  ) { }\n\n  ngOnInit() {\n\n  }\n\n\n}\n","module.exports = \"<div class=\\\"ui grid\\\">\\n  <div *ngIf=\\\"!orderlogs\\\" class=\\\"ui active dimmer\\\">\\n    <div class=\\\"ui large text loader\\\">Daten werden geladen...</div>\\n  </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n    <div class=\\\"ten wide column\\\">\\n<button *ngIf=\\\"authService.isBackendUser()\\\" class=\\\"ui tiny yellow button labeled icon\\\" [routerLink]=\\\"['../../update/', this.route.snapshot.params['id']]\\\"><i class=\\\"write icon\\\"></i>\\n  Status updaten</button>\\n    </div>\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n  </div>\\n <div class=\\\"column row\\\">\\n   <div class=\\\"sixteen wide column\\\">\\n    <div class=\\\"ui horizontal divider\\\">\\n      <h3>Bestellstatus-Historie</h3>\\n    </div>\\n   </div>\\n </div>\\n  <div class=\\\"column row\\\">\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n    <div class=\\\"ten wide column\\\">\\n      <div class=\\\"content\\\" *ngIf=\\\"orderlogs\\\">\\n        <div class=\\\"ui middle aligned divided list\\\">\\n          <div *ngFor=\\\"let orderlog of orderlogs\\\" class=\\\"item bs-orderlog-item\\\"\\n             [orderlog]=\\\"orderlog\\\" >\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"three wide column\\\">\\n      <!--platzhalter-->\\n    </div>\\n  </div>\\n</div>\\n\"","import {Component, Input, OnInit} from '@angular/core';\nimport {Order} from \"../shared/order\";\nimport {BookStoreService} from \"../shared/book-store.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {AuthService} from \"../shared/authentication-service\";\nimport {Orderlog} from \"../shared/orderlog\";\n\n@Component({\n  selector: 'bs-orderlog-list',\n  templateUrl: './orderlog-list.component.html',\n  styles: []\n})\nexport class OrderlogListComponent implements OnInit {\n    @Input() order: Order;\n             orderlogs : Orderlog[];\n\n  constructor(private bs: BookStoreService,\n              private router: Router,\n              private route : ActivatedRoute,\n              private authService : AuthService)\n  { }\n\n  ngOnInit() {\n      //Route zerlegen\n      const params = this.route.snapshot.params;\n      this.bs.getOrderlogs(params['id']).subscribe(\n          res => {\n              this.orderlogs = res;\n              for (let i = 0; i < res.length; i++) {\n                  this.orderlogs[i].status = this.bs.translateStatus(res[i].status);\n              }\n\n          }\n\n\n      );\n\n  }\n\n\n}\n","import {Address} from \"./address\";\n\nexport class AddressFactory {\n\n    static empty(): Address {\n        return new Address(null,\"\", 0,\"\",\"\",0, false, null);\n    }\n\n    static fromObject(rawBook: any): Address {\n        return new Address(\n            rawBook.id,\n            rawBook.street,\n            rawBook.postcode,\n            rawBook.city,\n            rawBook.country,\n            rawBook.taxPercentage,\n            rawBook.isMain,\n            rawBook.user_id\n\n\n        );\n    }\n\n}\n","export class Address {\n    constructor (\n        public id : number,\n        public street : string,\n        public postcode : number,\n        public city : string,\n        public country : string,\n        public taxPercentage : number,\n        public isMain: boolean,\n        public user_id? : number\n    ) {}\n}\n","import {Injectable, Input} from '@angular/core';\nimport {isNullOrUndefined} from \"util\";\nimport {HttpClient} from \"@angular/common/http\";\nimport * as decode from 'jwt-decode';\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport {repeat} from \"rxjs/internal/operators\";\n\n//npm install --save-dev jwt-decode\n\ninterface User {\n    result: {\n        \"id\": number,\n        \"name\": string,\n        \"email\": string,\n        \"email_verified_at\": null,\n        \"firstname\": string,\n        \"lastname\": string,\n        \"role\": number,\n        \"created_at\": Date,\n        \"updated_at\": Date\n    }\n}\n\n@Injectable()\nexport class AuthService {\n    //über dependency injection instanz von client geholt\n    private user : User;\n    private repeat : boolean;\n\n    private api = 'http://bookstore19.s1610456009.student.kwmhgb.at/api/auth';\n\n\n    constructor(private http: HttpClient) {\n    }\n\n    //wir schicken in payload als json mit\n    //postrequest bei dem er das an rest service schickt, da sollten wir dann token zurückbekommen\n    login(email: string, password: string) {\n        return this.http.post(`${this.api}/login`, {\n            'email': email,\n            'password': password\n        });\n    }\n\n    //setzt vorraus wir sind eingeloggt\n    public setCurrentUserId() {\n        //aktuell eingeloggten Benutzer holen\n        //Benutzer in local storage speichern\n        this.http.get<User>(`${this.api}/user`).pipe(retry(3)).subscribe(res => {\n            this.user = res;\n            localStorage.setItem('userId', res.result.id.toString());\n            localStorage.setItem('role', res.result.role.toString());\n            //console.log(\"give user in authservice\");\n            //console.log(res.result.id.toString());\n        });\n    }\n\n    //userid aus localstorage holen\n\n    public getCurrentUserId(){\n        return parseInt(localStorage.getItem(\"userId\"));\n    }\n\n    public getCurrentUser(){\n        return parseInt(localStorage.getItem(\"role\"));\n\n    }\n\n    //Token in localStorage speichern\n    public setLocalStorage(token: string) {\n        const decodedToken = decode(token);\n        localStorage.setItem('token', token);\n        this.setCurrentUserId();\n    }\n\n    //abmelden in Frontend\n    //zerstört aktuellen Webtoken\n    logout() {\n        this.http.post(`${this.api}/logout`, {});\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"userId\");\n        localStorage.removeItem(\"role\");\n        localStorage.removeItem(\"tax\");\n    }\n\n    //Helfermethode die schaut ob es token gibt\n    public isLoggedIn() {\n        if (!isNullOrUndefined(localStorage.getItem(\"token\"))) {\n            let token: string = localStorage.getItem(\"token\");\n            const decodedToken = decode(token);\n            let expirationDate: Date = new Date(0);\n            expirationDate.setUTCSeconds(decodedToken.exp);\n            if (expirationDate < new Date()) {\n                console.log(\"token expired\");\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"userId\");\n                localStorage.removeItem(\"role\");\n                localStorage.removeItem(\"tax\");\n                return false;\n            }\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    //controlling the BE and FE View\n    public isBackendUser(){\n        if (this.getCurrentUser() == 1){\n            return true;\n        }\n        else {\n            return false;\n        }\n\n    }\n\n    //gegenteil\n\n    isLoggedOut() {\n        return !this.isLoggedIn();\n    }\n\n    private errorHandler ( error:Error | any) : Observable<any> {\n        return throwError(error);\n    }\n}","export class Author {\n\n    constructor(\n        public id : number,\n        public firstName : string,\n        public lastName : string\n    ) {}\n}\n","import { Book } from './book';\n\nexport class BookFactory {\n\n    static empty(): Book {\n        return new Book(null, '', '', [], new Date(),0, '', 0, [{id: 0, url: '', title: ''}], '', 20.99, 1);\n    }\n\n    static fromObject(rawBook: any): Book {\n        return new Book(\n            rawBook.id,\n            rawBook.isbn,\n            rawBook.title,\n            rawBook.authors,\n            typeof(rawBook.published) === 'string' ?\n                new Date(rawBook.published) : rawBook.published,\n            rawBook.user_id,\n            rawBook.subtitle,\n            rawBook.rating,\n            rawBook.images,\n            rawBook.description,\n            rawBook.price,\n            rawBook.amount\n        );\n    }\n}","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpClientModule} from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError, retry } from \"rxjs/operators\";\nimport {Author, Book, Image} from \"./book\";\nimport {Order} from \"./order\";\nimport {OrderListComponent} from \"../order-list/order-list.component\";\nimport {Orderlog} from \"./orderlog\";\nimport {Address} from \"./address\";\nimport {AppComponent} from \"../app.component\";\n\n@Injectable()\nexport class BookStoreService {\n\n  private api = 'http://bookstore19.s1610456009.student.kwmhgb.at/api';\n  private BookInCart;\n  private cart = [];\n  public label : boolean;\n  orders : Order[];\n\n  constructor(private http: HttpClient) {}\n\n  addToCart (isbn:string, count:number){\n\n      //finds Index of isbn if exists\n      let isbnOnIndex = this.cart.findIndex(i => i.isbn === isbn);\n\n      if(this.cart.length == 0 || isbnOnIndex == -1){\n          this.BookInCart = {isbn: isbn, count: count};\n          this.cart.push(this.BookInCart);\n      }\n      //raises only the count of the book by the count if the isbn exists\n      else{\n          this.cart[isbnOnIndex].count += count;\n      }\n\n      localStorage.setItem('cart', JSON.stringify(this.cart));\n\n  }\n\n    createOrder(order: Order) : Observable<any>{\n        return this.http.post(`${this.api}/order`, order)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n    updateOrder(orderlog: Orderlog) : Observable<Array<Orderlog>>{\n        return this.http.put(`${this.api}/update/${orderlog.order_id}`, orderlog)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    sortDesc() : Observable<Array<Order>>{\n        return this.http.get(`${this.api}/orders/sortDesc`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    sortAsc() : Observable<Array<Order>>{\n        return this.http.get(`${this.api}/orders/sortAsc`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    sortByStatus(status:number) : Observable<Array<Order>>{\n        return this.http.get(`${this.api}/orders/by/${status}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    getOrderlogs(id:number) : Observable<Array<Orderlog>>{\n        return this.http.get(`${this.api}/orders/${id}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    getAllOrders() : Observable<Array<Order>>{\n        return this.http.get(`${this.api}/orders`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    getOrdersWithUserId(id:number) : Observable<Array<Order>>{\n        return this.http.get(`${this.api}/orders/findbyuser/${id}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    removeBookFromCart(isbn : string){\n        let cart = JSON.parse(localStorage.getItem(\"cart\"));\n\n        for (let i = 0; i < cart.length; i++) {\n            console.log();\n            if (cart[i].isbn == isbn) {\n                cart.splice(Number(i), 1);\n            }\n        }\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n    }\n\n    editCart(isbn:string, count:number){\n        let cart = JSON.parse(localStorage.getItem(\"cart\"));\n\n        //finds Index of isbn if exists\n        console.log(isbn);\n        console.log(count);\n        let isbnOnIndex = cart.findIndex(i => i.isbn === isbn);\n        console.log(isbnOnIndex);\n        console.log(cart);\n\n        //raises only the count of the book by the count if the isbn exists\n        cart[isbnOnIndex].count = count;\n\n        localStorage.setItem('cart', JSON.stringify(cart));\n\n        //this.orderlist.render();\n\n    }\n\n    translateStatus(status){\n        if(status === 0){\n            return status = \"Bestellung eingegangen\";\n        }\n        if(status === 1){\n            return status = \"in Bearbeitung\";\n        }\n        if(status === 2){\n            return status = \"Versandt\";\n        }\n        if(status === 3){\n            return status = \"Zugestellt\";\n        }\n        if(status === 4){\n            return status = \"Zurückgesandt\";\n        }\n        if(status === -1){\n            return status = \"Stoniert\";\n        }\n    }\n\n    getImage(status:string){\n\n        if(status == \"Bestellung eingegangen\"){\n            return \"assets/images/delivery-0.png\";\n        }\n        if(status == \"in Bearbeitung\"){\n            return \"assets/images/delivery-1.png\";\n        }\n        if(status == \"Versandt\"){\n            return \"assets/images/delivery-2.png\";\n        }\n        if(status == \"Zugestellt\"){\n            return \"assets/images/delivery-3.png\";\n        }\n        if(status == \"Zurückgesandt\"){\n            return \"assets/images/delivery-4.png\";\n        }\n        if(status == \"Stoniert\"){\n            return \"assets/images/delivery-failed.png\";\n        }\n\n    }\n\n    setLabel(){\n        return this.label = true;\n    }\n\n    unsetLabel(){\n        return this.label = false;\n    }\n\n    createAddress(address: Address) : Observable<Address>{\n        return this.http.post(`${this.api}/admin/address`, address)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    updateAddress(address: Address) : Observable<Address>{\n        return this.http.put(`${this.api}/admin/address/update/${address.id}`, address)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n    removeAddress(id: number) : Observable<any> {\n        return this.http.delete(`${this.api}/admin/address/update/${id}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    getAllAddresses(userId:number) : Observable<Array<Address>>{\n        return this.http.get(`${this.api}/admin/address/${userId}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n    getMainAddress(userId:number) : Observable<Array<Address>>{\n        return this.http.get(`${this.api}/admin/mainaddress/${userId}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n  /*\n  * Book Functions\n  */\n  getAll() : Observable<Array<Book>> {\n      return this.http.get(`${this.api}/books`)\n          .pipe(retry(3))\n          .pipe(catchError(this.errorHandler));\n\n  }\n\n  getSingle(isbn : string) : Observable<Book> {\n      return this.http.get(`${this.api}/book/${isbn}`)\n          .pipe(retry(3))\n          .pipe(catchError(this.errorHandler));\n  }\n\n  getStatusOfOrder(id:number): Observable<Order>{\n      return this.http.get(`${this.api}/order/getStatus/${id}`)\n          .pipe(retry(3))\n          .pipe(catchError(this.errorHandler));\n\n  }\n\n  create(book: Book) : Observable<any> {\n      return this.http.post(`${this.api}/book`, book)\n          .pipe(retry(3))\n          .pipe(catchError(this.errorHandler));\n  }\n\n    update(book: Book) : Observable<any> {\n        return this.http.put(`${this.api}/book/${book.isbn}`, book)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n    remove(isbn: string) : Observable<any> {\n        return this.http.delete(`${this.api}/book/${isbn}`)\n            .pipe(retry(3))\n            .pipe(catchError(this.errorHandler));\n    }\n\n  private errorHandler ( error:Error | any) : Observable<any> {\n      return throwError(error);\n  }\n}\n","import { Image} from \"./image\";\nexport { Image } from \"./image\";\nimport { Author} from \"./author\";\nexport { Author} from \"./author\";\n\nexport class Book {\n    constructor (\n       public id : number,\n       public isbn : string,\n       public title : string,\n       public authors : Author[],\n       public published : Date,\n       public user_id : number,\n       public subtitle? : string,\n       public rating? : number,\n       public images?: Image[],\n       public description? : string,\n       public price?: number,\n       public amount?: number\n\n    ) {}\n}\n","export class Image {\n\n    constructor (\n        public id: number,\n        public url: string,\n        public title : string\n    ) { }\n}\n","import { Book } from './book';\nimport {Order} from \"./order\";\n\nexport class OrderFactory {\n    static empty(): Order {\n        return new Order(null, 0, []);\n    }\n\n    static fromObject(rawOrder: any): Order {\n        return new Order(\n            rawOrder.id,\n            rawOrder.user_id,\n            rawOrder.addressId,\n            rawOrder.books,\n            rawOrder.status,\n            rawOrder.created_at\n        );\n    }\n}\n","import {Book} from \"./book\";\nexport {Book} from \"./book\";\n\nexport class Order {\n    constructor (\n        public user_id : number,\n        public addressId: number,\n        public books : Book[],\n        public status?,\n        public created_at?,\n        public id?\n    ) {}\n}\n","import { Injectable } from '@angular/core';\nimport {Orderlog} from \"./orderlog\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderlogFactoryService {\n    static empty(): Orderlog {\n        return new Orderlog();\n    }\n\n    static fromObject(rawOrder: any): Orderlog {\n        return new Orderlog(\n            rawOrder.note,\n            rawOrder.adminNote,\n            rawOrder.status,\n            rawOrder.order_id,\n            rawOrder.updated_at\n        );\n    }\n}\n","import {Order} from \"./order\";\nexport {Order} from \"./order\";\n\nexport class Orderlog {\n    constructor (\n        public note?: string,\n        public adminNote?: string,\n        public status?,\n        public updated_at?,\n        public order_id?: number,\n    ) {}\n}\n","import {Injectable} from \"@angular/core\";\nimport {HttpEvent, HttpHandler, HttpInterceptor, HttpRequest} from \"@angular/common/http\";\nimport {Observable} from 'rxjs';\n\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        request = request.clone({\n            setHeaders: {\n                Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n        });\n        return next.handle(request);\n    }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}